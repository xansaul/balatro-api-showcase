---
import type { GetStaticPaths } from "astro";
import MainLayout from "@/layouts/MainLayout.astro";
import type { JokerResponse } from "@/interfaces/joker-response";
import { TiltedCard } from "@/components/TiltedCard";
import Button from "@/components/Button.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const responseJokers = await fetch(
    `${import.meta.env.PUBLIC_BACKEND_URL}/api/jokers?limit=150`
  );
  const { data }: JokerResponse = await responseJokers.json();

  const jokers = data.map((joker) => ({
    joker_image: joker.joker_image,
    joker: joker.joker,
  }));

  return paginate(jokers, { pageSize: 14 });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const currentPage = page.currentPage;
const lastPage = page.lastPage;
const url = Astro.url;
const prevPage = currentPage > 1 ? currentPage - 1 : null;
const nextPage = currentPage < lastPage ? currentPage + 1 : null;
---

<MainLayout title="Jokers">
  <div class="min-h-[80vh] flex flex-col justify-center text-white ">
    <div class="md:w-10/12 2xl:w-9/12 w-11/12  m-auto">
      <h1 class="text-7xl mb-8 text-center">Jokers</h1>
      <div
        class=" grid xl:grid-cols-7 
        lg:grid-cols-5 md:grid-cols-4 sm:grid-cols-3 grid-cols-2"
      >
        {
          page.data.map((joker) => (
            <div class="flex flex-col items-center">
              <TiltedCard
                client:load
                imageSrc={joker.joker_image}
                containerHeight="200px"
                containerWidth="150px"
                imageHeight="200px"
                imageWidth="150px"
                rotateAmplitude={27}
                scaleOnHover={1}
                showTooltip={false}
                showMobileWarning={false}
              />
              <span class="block mt-1 text-lg">{joker.joker}</span>
            </div>
          ))
        }
      </div>
      <div class="flex justify-between items-center mt-4">
        {prevPage ? (
          <Button class="bg-black">
            <a  href={`/jokers/${prevPage}`}>
              Prev
            </a>
          </Button>
        ) : (
          <span></span> 
        )}
        <span class="text-2xl">
          Page {currentPage} of {lastPage}
        </span>
        {nextPage ? (
          <Button class="bg-black">
            <a href={`/jokers/${nextPage}`}>
              Next
            </a>
          </Button>
        ) : (
          <span></span> 
        )}
      </div>
    </div>
  </div>
</MainLayout>